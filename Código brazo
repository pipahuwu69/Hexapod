#include <WiFi.h>
#include <WebServer.h>
#include <BluetoothSerial.h>
#include <Servo.h>

// Pines de servos
#define SERVO_HOMBRO_PIN 13
#define SERVO_BRAZO_PIN 12
#define SERVO_ANTEBRAZO_PIN 14

// Ángulos iniciales
int anguloHombro = 90;
int anguloBrazo = 90;
int anguloAntebrazo = 110; // ligeramente mayor al brazo

// Servos
Servo servoHombro;
Servo servoBrazo;
Servo servoAntebrazo;

// WiFi
const char* ssid = "tu_ssid";
const char* password = "tu_password";
WebServer server(80);

// Bluetooth
BluetoothSerial SerialBT;
String buffer = "";
char com;
bool BTState = false;

// Inicializar servos
void setupServos() {
  servoHombro.attach(SERVO_HOMBRO_PIN);
  servoBrazo.attach(SERVO_BRAZO_PIN);
  servoAntebrazo.attach(SERVO_ANTEBRAZO_PIN);

  servoHombro.write(anguloHombro);
  servoBrazo.write(anguloBrazo);
  servoAntebrazo.write(anguloAntebrazo);
}

// Movimiento según dirección (usado por Wi-Fi)
void moverBrazo(int direccion) {
  switch (direccion) {
    case 0: anguloHombro = min(180, anguloHombro + 10); break; // Arriba
    case 1: anguloHombro = max(0, anguloHombro - 10); break;   // Abajo
    case 2: anguloBrazo = min(180, anguloBrazo + 10); break;   // Izquierda
    case 3: anguloBrazo = max(0, anguloBrazo - 10); break;     // Derecha
  }
  anguloAntebrazo = min(180, anguloBrazo + 20);
  actualizarServos();
}

void actualizarServos() {
  servoHombro.write(anguloHombro);
  servoBrazo.write(anguloBrazo);
  servoAntebrazo.write(anguloAntebrazo);
}

// Ruta Wi-Fi
void manejarPeticionCruzeta() {
  if (server.hasArg("direccion")) {
    int direccion = server.arg("direccion").toInt();
    moverBrazo(direccion);
    server.send(200, "text/plain", "Movimiento completado");
  } else {
    server.send(400, "text/plain", "Faltan parámetros");
  }
}

void configurarServidor() {
  server.on("/mover", HTTP_GET, manejarPeticionCruzeta);
  server.begin();
}

void setup() {
  Serial.begin(115200);

  // Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("Conectado a Wi-Fi");

  // Bluetooth
  SerialBT.begin("ESP32-BT");
  Serial.println("Bluetooth iniciado");

  // Servos y servidor web
  setupServos();
  configurarServidor();
}

void loop() {
  server.handleClient();

  if (SerialBT.available()) {
    com = SerialBT.read();
    if (com == 'n') {
      int num = buffer.toInt();
      if (num >= 0 && num <= 180) {
        anguloBrazo = num;
        anguloAntebrazo = min(180, anguloBrazo + 20);
        actualizarServos();
      }
      buffer = "";
    } else if (com == 's') {
      BTState = true;
    } else {
      buffer += com;
    }
  }
}
